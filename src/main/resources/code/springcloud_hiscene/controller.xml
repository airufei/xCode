<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>controller</name>
    <filePath>src/${packageName}/${subPackageName}/${javaModuleName}/controller</filePath>
    <fileName>${ClassName}Controller.java</fileName>
    <content><![CDATA[
package ${packageName}.${subPackageName}.${javaModuleName}.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import com.alibaba.fastjson.JSONObject;
import ${packageName}.model.${javaModuleName}.*;
import ${packageName}.base.model.Partion;
import ${packageName}.base.model.ResultCodeMessage;
import ${packageName}.base.model.RetData;
import ${packageName}.util.StringUtil;
import  ${packageName}.${subPackageName}.${javaModuleName}.rpc.*;
import ${packageName}.request.${javaModuleName}.${ClassName}Requst;
/**
 * ${ClassName}Controller(${functionName})
 * Controller 层的异常应该统一捕获进行处理，这样业务代码更加清晰
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@RestController
@RequestMapping("/${subModuleName}/")
@SuppressWarnings("all")
public class ${ClassName}Controller {

    private static Logger logger = LoggerFactory.getLogger(${ClassName}Controller.class);

	@Autowired
	private ${ClassName}RpcService ${className}RpcService;

	/**
	 * getList:(获取${functionName}分页查询接口)
	 * @Author ${functionAuthor}
	 * @param request
	 * @param parms
	 * @return
	 */
	@RequestMapping("getList")
	public RetData getList(@RequestBody ${ClassName}Requst ${className}Requst){
		RetData retData = new RetData();
        logger.info("getList:(获取${functionName}分页查询接口) 开始  param={}", ${className}Requst);
        Partion pt = ${className}RpcService.getList(${className}Requst);
        List<${ClassName}> list = null;
        long totalCount = 0;
        if (pt != null) {
            list = (List<${ClassName}>) pt.getList();
             totalCount = pt.getTotalCount();
        }
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("list", list);
        jsonObject.put("totalCount", totalCount);
        if (list == null||list.size()<=0) {
            retData.setData(jsonObject);
            retData.setCode(ResultCodeMessage.NO_DATA);
            retData.setMessage(ResultCodeMessage.NO_DATA_MESSAGE);
            return retData;
        }
        retData.setData(jsonObject);
        retData.setCode(ResultCodeMessage.SUCCESS);
        retData.setMessage(ResultCodeMessage.SUCCESS_MESSAGE);
        logger.info("getList:(获取${functionName}分页查询接口) 结束");
        return retData;
	}

     /**
     * get${ClassName}:(查询${functionName}单条数据接口)
     * @Author ${functionAuthor}
     * @param request
     * @param parms
     * @return
     */
    @RequestMapping("get${ClassName}")
    public RetData get${ClassName}(@RequestBody ${ClassName}Requst ${className}Requst) {
        RetData retData = new RetData();
        logger.info("get${ClassName}:(查询${functionName}单条数据接口) 开始  ${className}Requst={}", ${className}Requst);
        ${ClassName} ret${className}= ${className}RpcService.get${ClassName}(${className}Requst);
        retData.setData(ret${className});
        retData.setCode(ResultCodeMessage.SUCCESS);
        retData.setMessage(ResultCodeMessage.SUCCESS_MESSAGE);
        logger.info("get${ClassName}:(查询${functionName}单条数据接口) 结束");
        return retData;
    }

   /**
	 * save:(保存${functionName}数据接口)
	 * @Author ${functionAuthor}
     * @param request
     * @param parms
     * @return
	 */
	@RequestMapping(value = "save")
    public RetData save(${ClassName} ${className}) {
		RetData retData = new RetData();
	    logger.info("save:(保存${functionName}数据接口) 开始  ${className}={}", ${className});
        ${className}.setCreateTime(new Date());
        ${className}.setUpdateTime(new Date());
        // 保存数据库
        ${ClassName} ret =${className}RpcService.save(${className});
        if(ret!=null)
        {
          retData.setCode(ResultCodeMessage.SUCCESS);
          retData.setMessage(ResultCodeMessage.SUCCESS_MESSAGE);
        }
        logger.info("save:(保存${functionName}数据接口) 结束");
        return retData;
	}

	/**
	 * delete:(逻辑删除${functionName}数据接口)
	 * @Author ${functionAuthor}
     * @param request
     * @param parms
     * @return
	 */
	@RequestMapping("delete")
	public RetData delete(Long id){
	    RetData retData = new RetData();
	    logger.info("delete:(逻辑删除${functionName}数据接口) 开始  id={}", id);
        if (id != null && id > 0) {
            ${className}RpcService.delete(id);
            retData.setCode(ResultCodeMessage.SUCCESS);
            retData.setMessage(ResultCodeMessage.SUCCESS_MESSAGE);
        } else {
            retData.setMessage("请选择需要删除的数据");
        }
        logger.info("delete:(逻辑删除${functionName}数据接口) 结束");
        return retData;
	}

}]]>
    </content>
</template>